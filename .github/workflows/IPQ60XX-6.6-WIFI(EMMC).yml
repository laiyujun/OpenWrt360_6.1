name: IPQ60XX-6.6-WIFI(EMMC)-CORE

on:
  workflow_call:
    inputs:
      WRT_TARGET:
        required: true
        type: string
      WRT_THEME:
        required: true
        type: string
      WRT_NAME:
        required: true
        type: string
      WRT_WIFI:
        required: true
        type: string
      WRT_IP:
        required: true
        type: string
      WRT_PW:
        required: true
        type: string
      WRT_REPO:
        required: true
        type: string
      WRT_BRANCH:
        required: true
        type: string
      WRT_SOURCE:
        required: false
        type: string
      WRT_PATCH:
        required: false
        type: string
      WRT_PACKAGE:
        required: false
        type: string
      WRT_TEST:
        required: false
        type: string

env:
  REPO_URL: ${{inputs.WRT_REPO}}
  REPO_BRANCH: ${{inputs.WRT_BRANCH || 'main'}}
  CONFIG_FILE: configs/ipq60xx-6.6-wifi(emmc).config
  #DIY_SCRIPT: diy-script.sh
  #CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: IPQ60XX-6.6-WIFI(EMMC)-JDCLOUD
  TZ: Asia/Shanghai

  #GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  WRT_TARGET: ${{inputs.WRT_TARGET}}
  WRT_THEME: ${{inputs.WRT_THEME}}
  WRT_NAME: ${{inputs.WRT_NAME}}
  WRT_WIFI: ${{inputs.WRT_WIFI}}
  WRT_IP: ${{inputs.WRT_IP}}
  WRT_PW: ${{inputs.WRT_PW}}
  WRT_REPO: ${{inputs.WRT_REPO}}
  WRT_BRANCH: ${{inputs.WRT_BRANCH}}
  WRT_PATCH: ${{inputs.WRT_PATCH}}
  WRT_PACKAGE: ${{inputs.WRT_PACKAGE}}
  WRT_TEST: ${{inputs.WRT_TEST}}

jobs:
  Build:
    runs-on: ubuntu-22.04

    steps:
      - name: Check Server Performance
        run: |
          echo "警告⚠"
          echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
          echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
          echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
          echo "--------------------------硬盘信息--------------------------"
          echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

      - name: Free Disk Space
        uses: endersonmenezes/free-disk-space@main
        with:
          remove_android: true
          remove_dotnet: true
          remove_haskell: true
          remove_tool_cache: true
          remove_swap: true
          remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* \
            microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
          remove_packages_one_command: true
          remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* \
            /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* \
            /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* \
            /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* \
            /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift \
            /var/lib/mysql* /var/log/azure*"
          testing: false

      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
          sudo -E apt -yqq update
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E apt -yqq install dos2unix
          #sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
          #sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
          sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
          sudo -E systemctl daemon-reload
          sudo timedatectl set-timezone "$TZ"

      - name: Combine Disks
        uses: easimon/maximize-build-space@master
        with:
          swap-size-mb: 1024
          temp-reserve-mb: 100
          root-reserve-mb: 1024

      - name: Checkout
        uses: actions/checkout@main

      - name: Clone Source Code
        run: |
          df -hT $GITHUB_WORKSPACE
          git clone $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
          echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV

      - name: Generate Variables
        run: |
          cp $CONFIG_FILE $OPENWRT_PATH/.config
          cd $OPENWRT_PATH
          make defconfig > /dev/null 2>&1
          SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
          echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
          DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          
          export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export WRT_CI=$(basename $GITHUB_WORKSPACE)
          export WRT_VER=$(echo $WRT_REPO | cut -d '/' -f 5-)-$WRT_BRANCH
          export WRT_TYPE=$(sed -n "1{s/^#//;s/\r$//;p;q}" $GITHUB_WORKSPACE/$CONFIG_FILE)

          echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV
          echo "WRT_CI=$WRT_CI" >> $GITHUB_ENV
          echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
          echo "WRT_TYPE=$WRT_TYPE" >> $GITHUB_ENV

      - name: Check Scripts
        run: |
          find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

      - name: Cache Toolchain
        if: env.CACHE_TOOLCHAIN == 'true'
        uses: HiGarfield/cachewrtbuild@main
        with:
          ccache: false
          mixkey: ${{ env.SOURCE_REPO }}-${{ env.REPO_BRANCH }}-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          prefix: ${{ env.OPENWRT_PATH }}

      - name: Install Feeds
        run: |
          cd $OPENWRT_PATH
          
          sed -i '$a src-git istore https://github.com/linkease/istore;main' feeds.conf.default
          
          # 修复 hostapd 报错
          cp -f $GITHUB_WORKSPACE/scripts/011-fix-mbo-modules-build.patch package/network/services/hostapd/patches/011-fix-mbo-modules-build.patch
  
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Apply patches
        if: env.WRT_PATCH == 'true'
        run: |
          git config --global user.name "OpenWrt Builder"
          git config --global user.email "buster-openwrt@ovvo.uk"
          cd $OPENWRT_PATH
          wget https://raw.githubusercontent.com/koksaver/OpenWrt360_6.1/main/0001-fix-upnp.patch
          git am 0001-fix-upnp.patch

      - name: Load Custom Packages
        run: |
          cd $OPENWRT_PATH/package/
          echo "Custom Packages Here."

          $GITHUB_WORKSPACE/scripts/Packages.sh
          $GITHUB_WORKSPACE/scripts/Handles.sh

      - name: Load Custom Configuration
        run: |
          cd $OPENWRT_PATH
          
          rm -rf ./tmp* ./.config*
          
          cat $GITHUB_WORKSPACE/$CONFIG_FILE >> .config
          
          $GITHUB_WORKSPACE/scripts/init-settings.sh
          
          make defconfig

      - name: Download DL Package
        run: |
          cd $OPENWRT_PATH
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile Firmware
        id: compile
        run: |
          cd $OPENWRT_PATH
          echo -e "$(nproc) thread compile"
          make -j$(nproc) || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
          echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV

      - name: Check Space Usage
        if: (!cancelled())
        run: df -hT

      - name: Upload Bin Directory
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin

      - name: Organize Files
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          cat sha256sums
          cp $OPENWRT_PATH/.config build.config
          mv -f $OPENWRT_PATH/bin/packages/*/*/*.ipk packages
          tar -zcf Packages.tar.gz packages
          rm -rf packages feeds.buildinfo version.buildinfo
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: Upload Firmware To Artifact
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@main
        with:
          name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}

      - name: Upload Firmware To Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: R${{ env.DATE }} for ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware for ${{ env.FIRMWARE_TAG }}**
            ### 📒 固件信息
            - 这是带WIFI以及NSS且适用于EMMC的6.6内核固件
            - 💻 这是 ${{ env.FIRMWARE_TAG }} 平台使用的 OpenWrt 固件
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 💻 平台：${{env.WRT_TARGET}}
            - 💻 设备：${{env.WRT_TYPE}}
            - 🌐 默认地址: ${{env.WRT_IP}}
            - 🔑 默认密码: ${{env.WRT_PW}}
            ### 🧊 固件版本
            - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
            - ${{ env.VERSION_INFO }}
